<?php
    class github_api {

        const API_URL = 'https://api.github.com/';


        function __construct($oauth_token, $repo_name) { 
            $this->oauth_token = $oauth_token;
            $this->repo_name = 'gitsyllabus-' . $repo_name;
            $this->get_user_data();

        }

        function get_user_data() {  

            $args = array(
                'headers' => array( 
                    'Accept' => 'application/json',
                    'Authorization' => 'token ' . $this->oauth_token
                )
            );

            $response = wp_remote_get( github_api::API_URL . 'user', $args);


            if ( is_wp_error( $response ) ) {
                error_log('get_user_data messed up', 0);
            }
            else {
                $body = json_decode($response['body']);
                $this->owner = $body->login;
                $this->type = $body->type;

                if ($this->type != 'User') {
                    $this->is_org = true;
                }
            }

            $response = wp_remote_get( github_api::API_URL . 'user/repos', $args);

            if ( is_wp_error( $response ) ) {
                  error_log('get_user_data messed up', 0);
              }

            else {
                $body = json_decode($response['body']);
                foreach ($body as $repo) {
                    if ($repo->name == $this->repo_name) {
                        $this->has_repo = true;
                    }
                }
            }

            if (!$this->has_repo) {
                $this->create_repo();
            }

        }

        function create_repo() {
            
            $args = array(
                'body' => json_encode(array(
                    'name' => $this->repo_name,
                    'description' => 'Wordpress mirror generated by Git-Syllabus.',
                    'auto_init' => true 
                )),
                 'headers' => array(
                     'Accept' => 'application/json',
                     'Authorization' => 'token ' . $this->oauth_token,
                     'Content-type' => 'application/json'
                 )
             ); 

            $response = wp_remote_post( github_api::API_URL . 'user/repos', $args );

            if (is_wp_error( $response )) {
                error_log('repo creation messed up: ' . print_r($response, true), 0);
            }
            else {
                $this->has_repo = true;
                //right now just returning the url of the newly created repo.
                $body = json_decode($response['body']);
            }

        }

        function access_existing_repo($name) {

        }

        function commit_post($post) {
            $metadata = $this->generate_metadata($post);
            $content = $metadata . $post->post_content;
            $file_name = $post->post_name . '.md';
            $this->commit($file_name, $content);            
        }

        function commit($file_name, $content) {

            $git_url = github_api::API_URL . 'repos/' . $this->owner . '/' . $this->repo_name . '/git/';

            $args = array(
                'headers' => array( 
                    'Accept' => 'application/json',
                    'Authorization' => 'token ' . $this->oauth_token
                )
            );

            $response = wp_remote_get( $git_url . 'refs/heads/master', $args);


            //get sha from latest commit

            if ( is_wp_error( $response ) || $response['response']['code'] >= 400 ) {
                error_log('getting latest sha failed: '.print_r($response, true), 0);
                return "";
            }

            else {
                $body = json_decode($response['body']);
                $sha_latest_commit = $body->object->sha;
            }

            $response = wp_remote_get( $git_url . 'commits/' . $sha_latest_commit, $args);

            //get $sha_base_tree

            if ( is_wp_error( $response ) || $response['response']['code'] >= 400 ) {
                error_log('getting sha tree failed: '.print_r($response, true), 0);
                return "";
            }

            else {
                $body = json_decode($response['body']);
                $sha_base_tree = $body->tree->sha;
                error_log(print_r($response['body'], true));
            }

           $args = array(
               'body' => json_encode(array(
                   'base_tree' => $sha_base_tree,
                   'tree' => array(array(
                        'path' => $file_name,
                        'content' => $content,
                        'type' => 'tree',
                        'mode' => '100644'
                    ))

               )),
                'headers' => array(
                    'Accept' => 'application/json',
                    'Authorization' => 'token ' . $this->oauth_token,
                    'Content-type' => 'application/json'
                )
            );   


            $response = wp_remote_post( $git_url . 'trees', $args  );


            if ( is_wp_error( $response ) || $response['response']['code'] >= 400 ) {
                error_log('creating tree failed: '.print_r($response, true), 0);
                return "";
            }

            else {
                $body = json_decode($response['body']);
                $sha_new_tree = $body->sha;
            }

            $args = array(
                'body' => json_encode(array(
                    'base_tree' => $sha_base_tree,
                    'parents' => array( $sha_latest_commit ),
                    'tree' => $sha_new_tree,
                    'message' => $post->post_title . ' posted from Wordpress'
                )),
                'headers' => array(
                    'Accept' => 'application/json',
                    'Authorization' => 'token ' . $this->oauth_token,
                    'Content-type' => 'application/json'
                )
            );     

            $response = wp_remote_post( $git_url . 'commits', $args );

            if ( is_wp_error( $response ) || $response['response']['code'] >= 400 ) {
                error_log('creating commit failed: '.print_r($response, true), 0);
                return "";
            }

            else {
                $body = json_decode($response['body']);
                $sha_new_commit = $body->sha;
            }

            $args = array(
                'body' => json_encode(array(
                    'sha' => $sha_new_commit,
                    'force' => true
                )),
                'headers' => array(
                    'Accept' => 'application/json',
                    'Authorization' => 'token ' . $this->oauth_token,
                    'Content-type' => 'application/json'
                ),
                'method' => 'PATCH'
            );   


            $response = wp_remote_request( $git_url . 'refs/heads/master', $args );

            if ( is_wp_error( $response ) || $response['response']['code'] >= 400 ) {
                error_log("creating reference failed: ".print_r($response, true), 0);
                return "";
            }

            else {
                $body = json_decode($response['body']);
            }

        }

        function get_repos()
        {
            $args = array(
                'headers' => array(
                    'Accept' => 'application/json',
                    'Authorization' => 'token ' . $this->oauth_token
                )
            );
            $response = wp_remote_get(github_api::API_URL . 'user/repos', $args);

            if ( is_wp_error( $response ) || $response['response']['code'] >= 400 ) {
                echo 'Get repos failed';
                return "";
            }

            else {
                return json_decode($response['body']);
            }

        }

        function pull () {

        }

        function get_repo_status() {
            //Need to figure out how deep to make this. Eventual thought is sync.
        }

        function check_auth()
        {
            $args = array(
                'headers' => array(
                    'Accept' => 'application/json',
                    'Authorization' => 'token ' . $this->oauth_token
                )
            );
            $response = wp_remote_get(github_api::API_URL . 'user', $args);
            if ( is_wp_error( $response ) || ($response['response']['code'] >= 400 &&  $response['response']['code'] < 500)) {
                return false;
            }
            return true;
        }

        //TODO: Need to add metafields to post UI to pull this information. Some can potentially
        //be pulled from settings page? (at least instructor)

        function generate_metadata($post) {
            $meta_html = "<!-- Git-Syllabus" 
                . "\n Title: " . get_post_meta($post->ID, 'gs_title', true) 
                . "\n Instructor: " . get_post_meta($post->ID, 'gs_instructor', true)
                . "\n Discipline: " . get_post_meta($post->ID, 'gs_discipline', true)
                . "\n Taught: " . get_post_meta($post->ID, 'gs_taught', true)
                . "\n Level: " . get_post_meta($post->ID, 'gs_level', true)
                . "\n Semester: " . get_post_meta($post->ID, 'gs_semester', true)
                . " --> \n\n";

            return $meta_html;


        }

        function commit_metafile($metafile) {
            $file_name = 'metadata.json';
            $this->commit($file_name, $metafile);

        }
    }

?>